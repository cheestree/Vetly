openapi: 3.0.0
info:
  title: Vetly API
  description: API documentation for Vetly
  version: 1.0.0
servers:
  - url: http://localhost:3000/api

paths:
####  NEEDS REVIEWING ####
  /users/{userId}:
    get:
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  image_url:
                    type: string
                    nullable: true
                  role:
                    type: array
                    items:
                      type: string
        '404':
          description: User not found
  /users/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idToken:
                  type: string
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  uid:
                    type: string
                    nullable: true
                  name:
                    type: string
                  email:
                    type: string
                  roles:
                    type: array
                    items:
                      type: string
        '401':
          description: Unauthorized
  /users/request-role:
    post:
      summary: Request a role change
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requestedRole:
                  type: string
                justification:
                  type: string
                  nullable: true
                fileUrl:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Role change requested
####  NEEDS REVIEWING ####
  /animals:
    get:
      summary: List animals based on query parameters.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Animal name to filter by
          schema:
            type: string
        - name: microchip
          in: query
          description: Microchip number to filter by
          schema:
            type: string
        - name: birthDate
          in: query
          description: Birth date to filter by (format YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: species
          in: query
          description: Species to filter by
          schema:
            type: string
        - name: owned
          in: query
          description: Filter by owned status (true/false)
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number for pagination (default = 0)
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of results per page (default = 10)
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            example: "name"
        - name: sortDirection
          in: query
          description: Sort field and direction (`asc` or `desc`)
          schema:
            type: string
            example: "asc,desc"
      responses:
        '200':
          description: A list of animals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalPreview'
    post:
      summary: Add a new animal
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/AnimalCreateInputModel'
      responses:
        '201':
          description: Animal created
        '409':
          description: Animal already exists with the same microchip
  /animals/{animalId}:
    get:
      summary: Get a animal by ID
      security:
        - bearerAuth: []
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A animal object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalInformation'
        '404':
          description: Animal not found
    put:
      summary: Update a animal by ID
      security:
        - bearerAuth: []
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/AnimalUpdateInputModel'
      responses:
        '204':
          description: Animal updated
        '404':
          description: Animal not found
        '409':
          description: Animal already exists with the same microchip'
    delete:
      summary: Delete a animal by ID
      security:
        - bearerAuth: []
      parameters:
        - name: animalId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Animal deleted
        '404':
          description: Animal not found

  /clinics:
    get:
      summary: List all clinics
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: Name of clinic to filter by
          schema:
            type: string
        - name: lat
          in: query
          description: Latitude to filter by
          schema:
            type: number
        - name: lng
          in: query
          description: Longitude to filter by
          schema:
            type: number
        - name: page
          in: query
          description: Page number for pagination (default = 1)
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of results per page (default = 10)
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort field and direction (`field,asc` or `field,desc`)
          schema:
            type: string
            example: "name,asc"
      responses:
        '200':
          description: A list of clinics
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/ClinicPreview'
    post:
      summary: Add a new clinic
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/ClinicCreateInputModel'
      responses:
        '201':
          description: Clinic created
  /clinics/{clinicId}:
    get:
      summary: Get a clinic by ID
      security:
        - bearerAuth: []
      parameters:
        - name: clinicId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A clinic object
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ClinicInformation'
        '404':
          description: Clinic not found
    put:
      summary: Update a clinic by ID
      security:
        - bearerAuth: []
      parameters:
        - name: clinicId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/ClinicUpdateInputModel'
      responses:
        '200':
          description: Clinic updated
        '404':
          description: Clinic not found
    delete:
      summary: Delete a clinic by ID
      security:
        - bearerAuth: []
      parameters:
        - name: clinicId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Clinic deleted
        '404':
          description: Clinic not found

  /checkups:
    get:
      summary: List all checkups
      security:
        - bearerAuth: []
      
      parameters:
        - name: veterinarianId
          in: query
          schema:
            type: integer
        - name: veterinarianName
          in: query
          schema:
            type: string
        - name: clinicId
          in: query
          schema:
            type: integer
        - name: clinicName
          in: query
          schema:
            type: string
        - name: animalId
          in: query
          schema:
            type: integer
        - name: animalName
          in: query
          schema:
            type: string
        - name: dateTimeStart
          in: query
          schema:
            type: string
            format: date-time
        - name: dateTimeEnd
          in: query
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          description: Page number for pagination (default = 1)
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of results per page (default = 10)
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            example: "dateTime"
        - name: sortDirection
          in: query
          description: Sort direction (`asc` or `desc`)
          schema:
            type: string
            example: "asc,desc"
      responses:
        '200':
          description: A list of checkups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckupPreview'
    post:
      summary: Add a new checkup
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CheckupCreateInputModel'
      responses:
        '201':
          description: Checkup created
  /checkups/{checkupId}:
    get:
      summary: Get a checkup by ID
      security:
        - bearerAuth: []
      parameters:
        - name: checkupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A checkup object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckupInformation'
        '404':
          description: Checkup not found
    put:
      summary: Update a checkup by ID
      security:
        - bearerAuth: []
      parameters:
        - name: checkupId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CheckupUpdateInputModel'
      responses:
        '200':
          description: Checkup updated
        '404':
          description: Checkup not found
    delete:
      summary: Delete a checkup by ID
      security:
        - bearerAuth: []
      parameters:
        - name: checkupId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Checkup deleted
        '404':
          description: Checkup not found

  /guides:
    get:
      summary: List all guides
      parameters:
        - name: title 
          in: query
          description: Title of the guide to filter by
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination (default = 1)
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: Number of results per page (default = 10)
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            example: "createdAt"
        - name: sortDirection
          in: query
          description: Sort direction (`asc` or `desc`)
          schema:
            type: string
            example: "asc,desc"
      responses:
        '200':
          description: A list of guides
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GuidePreview'
    post:
      summary: Add a new guide
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/GuideCreateInputModel'
      responses:
        '201':
          description: Guide created
  /guides/{guideId}:
    get:
      summary: Get a guide by ID
      parameters:
        - name: guideId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A guide object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuideInformation'
        '404':
          description: Guide not found
    put:
      summary: Update a guide by ID
      security:
        - bearerAuth: []
      parameters:
        - name: guideId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuideUpdateInputModel'
      responses:
        '200':
          description: Guide updated
        '404':
          description: Guide not found
    delete:
      summary: Delete a guide by ID
      security:
        - bearerAuth: []
      parameters:
        - name: guideId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Guide deleted
        '404':
          description: Guide not found

components:
  schemas:
    AnimalInformation:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        microchip:
          type: string
          nullable: true
        species:
          type: string
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
        imageUrl:
          type: string
          nullable: true
        age:
          type: integer
          nullable: true
        owner:
          type: schema
          $ref: '#/components/schemas/UserPreview'
          nullable: true
    AnimalPreview:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image_url:
          type: string
          nullable: true
    AnimalCreateInputModel:
      type: object
      properties:
        name:
          type: string
        microchip:
          type: string
          nullable: true
        birth_date:
          type: string
          format: date
          nullable: true
        species:
          type: string
          nullable: true
        image_url:
          type: string
          nullable: true
    AnimalUpdateInputModel:
      type: object
      properties:
        name:
          type: string
        microchip:
          type: string
        birth_date:
          type: string
          format: date
        species:
          type: string
        image_url:
          type: string
    CheckupInformation:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        dateTime:
          type: string
          format: date
        missed:
          type: boolean
        animal:
          type: schema
          $ref: '#/components/schemas/AnimalInformation'
        veterinarian:
          type: schema
          $ref: '#/components/schemas/UserPreview'
        clinic:
          type: schema
          $ref: '#/components/schemas/ClinicPreview'
        files:
          type: array
          items:
            type: schema
            $ref: '#/components/schemas/StoredFileInformation'
    CheckupPreview:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        dateTime:
          type: string
          format: date
        missed:
          type: boolean
        animal:
          type: schema
          $ref: '#/components/schemas/AnimalPreview'
        veterinarian:
          type: schema
          $ref: '#/components/schemas/UserPreview'
        clinic:
          type: schema
          $ref: '#/components/schemas/ClinicPreview'
    CheckupCreateInputModel:
      type: object
      properties:
        animalId:
          type: integer
        veterinarianId:
          type: integer
        clinicId:
          type: integer
        dateTime:
          type: string
          format: date
        description:
          type: string
        files:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/StoredFileInformation'
    CheckupUpdateInputModel:
      type: object
      properties:
        veterinarianId:
          type: integer
          nullable: true
        dateTime:
          type: string
          format: date
          nullable: true
        description:
          type: string
          nullable: true
    ClinicInformation:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        lat:
          type: number
        lng:
          type: number
        phone:
          type: string
        email:
          type: string
        imageUrl:
          type: string
          nullable: true
        owner:
          type: schema
          nullable: true
          $ref: '#/components/schemas/UserPreview'
    ClinicPreview:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
    ClinicCreateInputModel:
      type: object
      properties:
        name:
          type: string
        nif:
          type: string
        address:
          type: string
        lat:
          type: number
        lng:
          type: number
        phone:
          type: string
        email:
          type: string
        imageUrl:
          type: string
          nullable: true
        ownerId:
          type: integer
          nullable: true
    ClinicUpdateInputModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        lat:
          type: number
          nullable: true
        lng:
          type: number
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        ownerId:
          type: integer
          nullable: true
    MedicalSupplyUpdateInputModel:
      type: object
      properties:
        price:
          type: number
          nullable: true
        count:
          type: number
          nullable: true
    GuideInformation:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        imageUrl:
          type: string
          nullable: true
        description:
          type: string
        content:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
          nullable: true
    GuidePreview:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        imageUrl:
          type: string
          nullable: true
        description:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
          nullable: true
    GuideCreateInputModel:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        imageUrl:
          type: string
          nullable: true
        content:
          type: string
    GuideUpdateInputModel:
      type: object
      properties:
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        content:
          type: string
          nullable: true
    StoredFileInputModel:
      type: object
      properties:
        url:
          type: string
        description:
          type: string
          nullable: true
    StoredFileInformation:
      type: object
      properties:
        uuid:
          type: string
        url:
          type: string
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date
    UserInformation:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        image_url:
          type: string
          nullable: true
        role:
          type: array
          items:
            type: string
    UserPreview:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image_url:
          type: string
          nullable: true
    RoleRequestInformation:
      type: object
      properties:
        id:
          type: string
        requestedRole:
          type: string
        status:
          type: string
        justification:
          type: string
          nullable: true
        fileUrl:
          type: string
          nullable: true
        submittedAt:
          type: string
          format: date 
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT